Linux file system:
--------------------
/ called as root directory
Home directory: All the directories are created under the Home directory with user name. it contain only normal users info.
---------------

bin directory: Contain all the binary files.
-------------
-> As a normal user we can accessible the binaries in the bin directory only. But the root user accessible for both bin and sbin.

sbin directory: sbin=system binary : Contain some binaries like shutdown, reboot, adduser,,,, etc
----------------
-> The binaries which are avaiable in the sbin directory only accessible by the root user.

TYPES Of USERS:
---------------
1)root user/system user
2)normal user
3)system user

etc directory: contain all the configuration files like shadow, passwd(contains user inforamation), group, sudoers,,,,etc
--------------

lib directory: Contain all the libraries which are used by the Operating system.
--------------

proc directory: All the process info available in this dir and also contain main files called as cpuinfo file, meminfo,,,,etc
---------------

dev directory: dev=devices: we can attach printers, hard disks,,,
--------------

tmp directory: It can be accessible all the users in that server.
--------------

var directory: All the system variable information available like logs, mails,,,,etc.
--------------

opt directory: By defalut opt directory is empty. This opt dir can be accessible by the root user. Generally in opt dir we are going to install all the 
-------------- third party softwares.

Q. what is the root user home directory?
Ans: /root

----------------------------------------------------------CLASS-1 END-------------------------------------------------------------------------------------

LINUX COMMANDS:
---------------

# mkdir <dir_name>
# mkdir -p <dir1>/<dir2>  --> dir2 created as sub dir to dir1. if dir1 is not there already it will create both, if dir1 is already exist create dir2 only.
# mkdir -m 700 <dir_name>  --> Creating a dir with custom permissions.
# touch <file_name>  --> To create a empty file.
# cat <file_name>  --> To list the content in the file.
# man <command>  --> its helps to list the options.  ex:- man mkdir, man ls 
# ls  --> list all the files and directories.
# ls -l --> long list. files starting with -(hypan) and dir starting with 'd'.
Example:
--------
[root@ip-172-31-45-133 ~]# ls -l
total 0
drwxr-xr-x 2 root root 6 Jul 27 15:52 dir1  (first root is username and second root is group name)
-rw-r--r-- 1 root root 0 Jul 27 15:53 file1

# ls -a  --> list the hidden directories and files.
# tree  --> list the all the files and dirs in tree way model.
Example:
--------
[root@ip-172-31-45-133 ~]# tree
.
├── dir1
├── dir2
├── file1
└── file2

2 directories, 2 files

# ls -lt  --> based on recent access file time it displays.
Example:
--------
[root@ip-172-31-45-133 ~]# ls -lt
total 0
drwxr-xr-x 2 root root 24 Jul 27 16:12 dir1
drwxr-xr-x 2 root root  6 Jul 27 16:08 dir2
-rw-r--r-- 1 root root  0 Jul 27 16:07 file2
-rw-r--r-- 1 root root  0 Jul 27 15:53 file1

# ls -ltr  --> reverse
Example:
-------
[root@ip-172-31-45-133 ~]# ls -ltr   (t= access time, r=reverse)
total 0
-rw-r--r-- 1 root root  0 Jul 27 15:53 file1
-rw-r--r-- 1 root root  0 Jul 27 16:07 file2
drwxr-xr-x 2 root root  6 Jul 27 16:08 dir2
drwxr-xr-x 2 root root 24 Jul 27 16:12 dir1

# ls -li  list the i nodes. As a human we are remembering file names and dir names but the OS rembered those names with the help of i noed number.
  i node number contains all the info about files and dirs like who is the user, group, timestamp and all except file name and dir name.
Example:
-------
[root@ip-172-31-45-133 ~]# ls -li
total 0
 382704 drwxr-xr-x 2 root root 24 Jul 27 16:12 dir1
4458281 drwxr-xr-x 2 root root  6 Jul 27 16:08 dir2
9181614 -rw-r--r-- 1 root root  0 Jul 27 15:53 file1
9181615 -rw-r--r-- 1 root root  0 Jul 27 16:07 file2

# cd  -> moves to that particular user home directory.
# cd / -> moves root directory.
Example:
-------
[root@ip-172-31-45-133 ~]# cd
[root@ip-172-31-45-133 ~]# pwd
/root
[root@ip-172-31-45-133 ~]# cd /
[root@ip-172-31-45-133 /]# pwd
/

# cd -  -->Previous working directory where you are in.
# rmdir <dir_name> --> To delete empty directories.
# rm -rf <dir_name> --> To delete the directory needs to use -r.
# rm -f <file_name>  --> To delete the files.

# yum install/update/remove <package name>
Examples:
---------
# yum install tree  --> To install packages in RedHat.
# yum update tree   --> To update packages in RedHat.
# yum remove tree  --> To remove packages in RedHat.

-------------------------------------------------------------------CLASS-2 END----------------------------------------------------------------------------

--> find command used to search and locate list of file and directories based on conditions you specify for files that match the arguments.Find can be used in
in variety of conditions like you can find files by permissions, users, groups, filetype, date, size,,,,etc.

# find . -type f   -->List the all files in current path.

Q. How to find empty files in current path?
Ans: # find . -type f -empty

# find ~ -type f -empty  --> All the empty files in users home directory.
# find / -type f -empty  --> All the empty filees in the server (To execute this command we need root access or sudo acces)

# find . -type d -empty  --> Lists the all the empty directories in current path.

-->Based on the umask value the default permissions are going to set for files and dirs.

                           umask(defalut value)    default file permission
          root             0022                         0644
   Normal user             0002                         0662


root-Base permissions for file are:  0666                   Base permission for directory are:    0777
                                    -0022 (umask)                                               - 0022
                                    -----                                                        -----
                                    0644                                                         0755



AS a normal user    0666                         Base permission for directory are:  0777
                    0002                                                            -0002
                    ----                                                             ----
                    0662                                                             0775



-->Command to display umask value:
[root@ip-172-31-45-133 ~]# umask
0022

# umask <value>  -->Command to set umask value
example:
-------
[root@ip-172-31-45-133 ~]# umask 0222
[root@ip-172-31-45-133 ~]# umask
0222

-->To set umask permanantley--> Go to users home directory add umask <value> in .bash_profile file. and to reflect the change exit as that user and re-login 

-->To set umask value for all the users add umask <value> in /etc/profile file.
--> After set the umask value only the new files and dirs  permission are changed. the file's permissions which already created before won't change.

rwxr-xr-x   
r-->read-->4
w-->write-->2
x-->execute-->1

-->Each file or dir has 3sets of permissions.
   first set-->owner/user  second set--> group  third set-->other
   
   CHANGE PERMISSIONS
   -------------------

# chmod <value> file/dir-name -->To change the permissions
Example:
-------
# chmod 777 file1.txt

[root@ip-172-31-45-133 ~]# ll
total 0
drwxr-xr-x 2 root root 24 Jul 27 16:12 dir1
drwxr-xr-x 2 root root  6 Jul 27 16:08 dir2
-rw-r--r-- 1 root root  0 Jul 27 15:53 file1
-rw-r--r-- 1 root root  0 Jul 27 16:07 file2
[root@ip-172-31-45-133 ~]# chmod +x file1
[root@ip-172-31-45-133 ~]# ll
total 0
drwxr-xr-x 2 root root 24 Jul 27 16:12 dir1
drwxr-xr-x 2 root root  6 Jul 27 16:08 dir2
-rwxr-xr-x 1 root root  0 Jul 27 15:53 file1
-rw-r--r-- 1 root root  0 Jul 27 16:07 file2

#chmod +r filenme == chmod ugo+r filename
#chmod u+rwx,g+r,o+r filename
Example:
-------
[root@ip-172-31-45-133 ~]# chmod u+rwx,g+r,o+r file1
[root@ip-172-31-45-133 ~]# ll
total 0
drwxr-xr-x 2 root root 24 Jul 27 16:12 dir1
drwxr-xr-x 2 root root  6 Jul 27 16:08 dir2
-rwxr--r-- 1 root root  0 Jul 27 15:53 file1
-rw-r--r-- 1 root root  0 Jul 27 16:07 file2


[root@ip-172-31-45-133 ~]# chmod u-rwx,g-r,o-r file1
[root@ip-172-31-45-133 ~]# ll
total 0
drwxr-xr-x 2 root root 24 Jul 27 16:12 dir1
drwxr-xr-x 2 root root  6 Jul 27 16:08 dir2
---------- 1 root root  0 Jul 27 15:53 file1
-rw-r--r-- 1 root root  0 Jul 27 16:07 file2

[root@ip-172-31-45-133 ~]# chmod ugo+rw file1
[root@ip-172-31-45-133 ~]# ll
total 0
drwxr-xr-x 2 root root 24 Jul 27 16:12 dir1
drwxr-xr-x 2 root root  6 Jul 27 16:08 dir2
-rw-rw-rw- 1 root root  0 Jul 27 15:53 file1
-rw-r--r-- 1 root root  0 Jul 27 16:07 file2

#chmod 444 dir1  --> the sub dirs and file's permissions under dirl are not changed.
#chmod -R 444 dir1  -->the sub dirs and file's permissions under dirl are changed.



[ec2-user@ip-172-31-45-133 ~]$ sudo su
[root@ip-172-31-45-133 ec2-user]# pwd
/home/ec2-user
[root@ip-172-31-45-133 ec2-user]# exit
exit
[ec2-user@ip-172-31-45-133 ~]$ sudo su -
Last login: Thu Jul 28 04:24:14 UTC 2022 on pts/0
[root@ip-172-31-45-133 ~]# pwd
/root





CHANGE OWNERSHIP:
-----------------
#chown,chgrp command executed as a root user only.
#chown <owner_name> file/dir
#chgrp <group_name> file/dir

#chown -R , chgrp -R  --> for all sub dir and files
#chown ownername:groupname file/dir  both user and group change at a time

----------------------------------------------------------------CLASS-3 END-------------------------------------------------------------------------------

COPY FILES FROM ONE DIR/FILE TO OTHER DIR/FILE
----------------------------------------------

# cp file.txt dir1
# cp -r dir1 dir2   -->if it is a dir needs to use -r

RENAME THE FILE  AND MOVE THE FILE:
------------------------------------
# mv old_filename/dir-name new_filename/dir-name  --> To rename
# mv file1.txt dir1
# mv dir1 dir2


# file <file-name> to check what type of file it is..

NUMBER OF LINES IN A FILE:
-------------------------
# wc <file-name>
Example:
----------
[root@ip-172-31-45-133 ~]# wc file1.txt 
  313  1469 10111 file1.txt

--> 313 Lines, 1469 words, 10111 characters.

# wc -l <file_name>  -->  oprints only the lines
Example;
--------
[root@ip-172-31-45-133 ~]# wc -l file1.txt 
313 file1.txt
# wc -w <file_name>  --> prints only words
# wc -c <file_name>  --> prints only characters

CREATING LINK:
-------------
-->By default the ln command creates Hardlink
-->ln command can be executed by the any of the users

Hardlink:- The original file and link file have the same properties. if the original file has 2gb, then the link file also has 2gb, same permissions 
and all,,,, etc.

# ln /var/flipkart/flipkar.log /tmp/flipkart-linkfile.log (Hard link)
# ln -s /var/flipkart/flipkar.log /tmp/flipkart-linkfile.log (Soft link)


                      Hardlink                                    Softlink
                      ---------                                   ---------
-->Link file having same as original                    different properties
   file properties
-->Even if we delete the original file                  If we delete the original file, not able to access the link file
   still we can access to link file
--> if we update original file the link
     also updated and vice-versa
     
     
     
     
# vi file1.txt
--> esc -> shift + colon -> se nu -> Enter ---> To set line numbers to the content in the file
--> esc -> shift + colon -> se nonu -> Enter ---> To remove line numbers to the content in the file
--> esc -> shift + colon -> <enter the number where we want to jump> -> Enter
--> esc -> shift + colon ->/<word want you search> -> Enter


--------------------------------------------------------------CLASS-4 END---------------------------------------------------------------------------------

# cat -n <file_name>  -->Displays the content with numbers
Example:
---------
[root@ip-172-31-45-133 ~]# cat -n file1.txt 
     1  Linux file system:
     2  --------------------
     3  / called as root directory
     4  Home directory: All the directories are created under the Home directory with user name. it contain only normal users info.
     5  ---------------
     6
     7  bin directory: Contain all the binary files.
     8  -------------
     9  -> As a normal user we can accessible the binaries in the bin directory only. But the root user accessible for both bin and sbin.
    10
    11  sbin directory: sbin=system binary : Contain some binaries like shutdown, reboot, adduser,,,, etc
    12  ----------------


# head -n <number> <file_name>  -->Displays the first n numbers. By default first 10 numbers are displayed

Example:
--------
[root@ip-172-31-45-133 ~]# head -n 20 file1.txt 
Linux file system:
--------------------
/ called as root directory
Home directory: All the directories are created under the Home directory with user name. it contain only normal users info.
---------------

bin directory: Contain all the binary files.
-------------
-> As a normal user we can accessible the binaries in the bin directory only. But the root user accessible for both bin and sbin.

sbin directory: sbin=system binary : Contain some binaries like shutdown, reboot, adduser,,,, etc
----------------
-> The binaries which are avaiable in the sbin directory only accessible by the root user.

TYPES Of USERS:
---------------
1)root user/system user
2)normal user
3)system user


# tail -n <number> <file_name>  -->Displays the last n numbers.

Q. How to see that last 10 line updated content keep changing?
Answer:- # tail -f <file_name>  (-f = file appender)

# sed -n '<line_number_which we want to display p>' <file_name>  -->displays the content in given line number.
Example:
--------
[root@ip-172-31-45-133 ~]# sed -n '78p' file1.txt 
# ls -lt  --> based on recent access file time it displays.

# sed -n '108,120p' <file_name> -->Displays the content in the given range.

-->sed(stream editor) command also used to replace the particular content in the file
Example:
--------
[root@ip-172-31-45-133 ~]# cat sample.txt 
red is danger color red
red is not good red
i hate red   red 
[root@ip-172-31-45-133 ~]# sed 's/red/blue/' sample.txt     (in each line only first occurance replaced)
blue is danger color red
blue is not good red
i hate blue   red 

[root@ip-172-31-45-133 ~]# cat sample.txt 
red is danger color red
red is not good red
i hate red   red 
[root@ip-172-31-45-133 ~]# sed 's/red/blue/g' sample.txt    (s=string   g=globally)
blue is danger color blue
blue is not good blue
i hate blue   blue 


# sed -i 's/red/blue/g' sample.txt  (now the original file changed) 

# more <file_name> --> Displays the content page by page or screen by screen   (ctrl+f--> to forward and ctrl+b-->backward)

# less <file_name>  --> if we want to come out press q or ctrl+c

SORT COMMAND:
-------------

[root@ip-172-31-45-133 ~]# cat sort.txt 
nihar
raj
ramesh
suresh
bhaskar
mithun
[root@ip-172-31-45-133 ~]# sort sort.txt 
bhaskar
mithun
nihar
raj
ramesh
suresh

# sort -r <file_name> (displays output in reverse order)

# cat <file_name> | sort  (here first command output passed as a input to the second command)
Example:
--------
[root@ip-172-31-45-133 ~]# cat sort.txt 
nihar
raj
ramesh
suresh
bhaskar
mithun
[root@ip-172-31-45-133 ~]# cat sort.txt | sort     (| called pipe symbol)
bhaskar
mithun
nihar
raj
ramesh
suresh

[root@ip-172-31-45-133 ~]# cat sort.txt | sort | tr [a-z] [A-Z]    (tr=translate)
BHASKAR
MITHUN
NIHAR
RAJ
RAMESH
SURESH

GREP:
-----
-->grep(global regular expression print)
-->grep used to search

# grep <word-to-search> <file_name>
Example:
--------
[root@ip-172-31-45-133 ~]# grep 'nihar' sort.txt 
nihar
[root@ip-172-31-45-133 ~]# grep 'Nihar' sort.txt 
[root@ip-172-31-45-133 ~]# grep -i 'Nihar' sort.txt   (-i = ignore the case)
nihar


SYSTEM RELATED COMMANDS:
________________________

WHO COMMAND:
-----------
--> who command used to know how many users are logged in

Example:
-------
[root@ip-172-31-45-133 ~]# who
ec2-user pts/0        2022-07-28 09:46 (ec2-3-110-188-88.ap-south-1.compute.amazonaws.com)
[root@ip-172-31-45-133 ~]# who -H
NAME     LINE         TIME             COMMENT
ec2-user pts/0        2022-07-28 09:46 (ec2-3-110-188-88.ap-south-1.compute.amazonaws.com)

UPTIME COMMAND:
-------------
--> used to know from how long this server up and running.
Example:
--------
[ec2-user@ip-172-31-45-133 ~]$ uptime                                         (To see the load average)
 10:47:14 up 1 day, 54 min,  1 user,  load average: 0.00, 0.00, 0.00

# cat /proc/cpuinfo  --> (To see how many cpu cores this server has)

[root@ip-172-31-45-133 ~]# users
ec2-user

[root@ip-172-31-45-133 ~]# whoami   (as which user we are logged in)
root

-->whereis command used to know where the package is.
# whereis <package-name>
Example:
-------
[root@ip-172-31-45-133 ~]# whereis yum
yum: /usr/bin/yum /etc/yum /etc/yum.conf /usr/share/man/man8/yum.8

[root@ip-172-31-45-133 ~]# date
Thu Jul 28 11:02:35 UTC 2022

# date -s "date format"  --> To set the date

To check how many hard disks are attached and how much it is used and how much it is free
 # df -h  (df = disk free)

[root@ip-172-31-45-133 ~]# df -h
Filesystem      Size  Used Avail Use% Mounted on
devtmpfs        474M     0  474M   0% /dev
tmpfs           483M     0  483M   0% /dev/shm
tmpfs           483M  408K  483M   1% /run
tmpfs           483M     0  483M   0% /sys/fs/cgroup
/dev/xvda1      8.0G  1.6G  6.5G  20% /
tmpfs            97M     0   97M   0% /run/user/1000

# du <directory_name>  --> To know how much disk space that directory utilized

[root@ip-172-31-45-133 ~]# du /home
4       /home/ec2-user/.ssh
24      /home/ec2-user
24      /home
[root@ip-172-31-45-133 ~]# du -h /home
4.0K    /home/ec2-user/.ssh
24K     /home/ec2-user
24K     /home
[root@ip-172-31-45-133 ~]# du -sh /home    (s=summary)
24K     /home


[root@ip-172-31-45-133 ~]# hostname
ip-172-31-45-133.ap-south-1.compute.internal

[root@ip-172-31-45-133 ~]# hostname -i
172.31.45.133

--> To set hostname

[root@ip-172-31-45-133 ~]# hostname potla
[root@ip-172-31-45-133 ~]# exit
logout
[ec2-user@ip-172-31-45-133 ~]$ sudo su -
Last login: Thu Jul 28 10:57:22 UTC 2022 on pts/0
[root@potla ~]# 



[root@potla ~]# whatis ls
ls (1)               - list directory contents
ls (1p)              - list directory contents
[root@potla ~]# whatis sed
sed (1)              - stream editor for filtering and transforming text
sed (1p)             - stream editor


# service service_name start/stop/status/restart  (as a normal user we cant start and stop the service)
Example;
-------
# service jenkins start

# systemctl start/stop/status/restart service_name

# systemctl list-unit-files --> To list all the services;

LAST COMMAND
------------
--> show listing of last logged in users


[root@potla ~]# last
ec2-user pts/0        ec2-3-110-188-88 Thu Jul 28 09:46   still logged in   
ec2-user pts/0        ec2-3-7-74-68.ap Thu Jul 28 05:34 - 07:33  (01:59)    
ec2-user pts/0        ec2-43-204-23-13 Thu Jul 28 03:12 - 04:51  (01:38)    
ec2-user pts/0        ec2-43-204-23-13 Thu Jul 28 02:39 - 03:12  (00:32)    
ec2-user pts/1        ec2-3-110-120-67 Wed Jul 27 15:36 - 17:03  (01:26)    
ec2-user pts/0        ec2-3-110-120-67 Wed Jul 27 15:16 - 15:39  (00:22)    
reboot   system boot  5.10.118-111.515 Wed Jul 27 09:52 - 11:34 (1+01:41)   

wtmp begins Wed Jul 27 09:52:50 2022

--------------------------------------------------------------------CLASS-5 END---------------------------------------------------------------------------



PROCESS MANAGEMENT COMMANDS:
----------------------------
# ps  --> process id of user (displays the current process running)
# ps -ef  --> process ids of all users   (e means ALL  f means formatted way)
# ps -ef | grep java  --> process ids of all java 
# ps -ef | grep jenkins  --> process id of jenkins

# kill -9 <PID>  --> To kill the process


# ctrl + c --> Terminate the process.
# ctrl + z --> Suspend the process

# top  --> Lists how your server resources are utilizing currently. (Displays linux tasks)

# sar(system activity report)  --> It is used to collect the CPU, Memory and I/O usage.

CREATING ARCHIVE FILES (zip and tar)
----------------------
# zip -r <dir_name> devops.zip  (For directories needs to use -r)
# Zip *.txt devops.zip  (To create zip files from all the text files)
# unzip devops.zip (To extract into the current directory)
# unzip devops.zip -d <path where we want to extract>

# tar -cvf devops.tar <dir_name>  (c=create  v=verbose  f=file)
# tar -cvf devops.tar *.txt  (tar all the text files)
# tar -xvf devops.tar  (To extract tar files)

USER AND GROUP ADMINISTRATION COMMANDS:
---------------------------------------

# useradd <user_name> (/home/<user_name> is the user's default home directory)
# useradd -d <path> <user_name>  --> Creating a user with custome home directory  (Only root user can perform useradd command)
# useradd -d /tmp/venky venky

# passwd <user_name>   -->to create password for the user

--> Normal users uid's starting from 1000.
--> root user uid is 0.

--> /etc->passwd file (contains all the users info)
--> /etc->group file (contains all the group info)
--> /etc->shadow file (Contains password and related info)

# chage <user_name>  --> To set the password attributes.
Example:
-------
[root@ip-172-31-45-133 ~]# chage venky
Changing the aging information for venky
Enter the new value, or press ENTER for the default

        Minimum Password Age [0]: 90
        Maximum Password Age [99999]: 90
        Last Password Change (YYYY-MM-DD) [2022-07-30]: 2022-10-10
        Password Expiration Warning [7]:     
        Password Inactive [-1]: 
        Account Expiration Date (YYYY-MM-DD) [-1]: 
        
        
# groupadd <group_name>   --> To create group
# usermod -g <group-name> <user_name>  -->To change the user's group

# usermod -L <user_name> --> To lock the user from logging
# usermod -U <user_name> --> To unlock the user
 
 --> in /etc/shadow file we see a exclamatory (!) for a user that means the user is locked.
 
 -------------------------------------------------------------- CLASS-6 END-------------------------------------------------------------------------------
 
 --> id command used to know the below details:
 
[root@ip-172-31-45-133 ~]# id venky
uid=1001(venky) gid=1001(venky) groups=1001(venky)

Switch to the user:

[root@ip-172-31-45-133 ~]# su - venky
Last login: Sat Jul 30 14:48:10 UTC 2022 on pts/1
[venky@ip-172-31-45-133 ~]$ pwd
/home/venky

-> To give the sudo access add users to sudoers file which is in /etc->sudoers file
or  #visudo   venky   ALL=(ALL)       ALL  (add this line to give sudo access to that particular user)

# userdel <user_name>  (it only deletes the user)
# userdel -r <user_name>  (delete the user along with his home directory)
# groupdel <grp-name>

REMOTE ACCESS COMMANDS:
-----------------------
# cd /etc/ssh -> sshd_config  (To change the password autentication)
  PasswordAuthentication no  to PasswordAuthentication yes to login with password and the changes applied after restart only
    # service sshd restart

# ssh venky@65.0.3.163 --> Now it asks password

# scp <files to be copied>  <RmoteServerUsername>@<RmoteServerIP>:<Destination_path> 

# scp -r <dir_name>  <RmoteServerUsername>@<RmoteServerIP>:<Destination_path>  (if it is directory) 

HARDWARE INFORMATION COMMANDS:
-----------------------------
# free -h  (displays info about RAM)
# dmidecode

-----------------------------------------------------------------CLASS-7 END------------------------------------------------------------------------------

# crontab -l  --> To see how many jobs are scheduled in crontab.
--> create a empty file called cron.allow file in etc directory(if we create that file the crontab feature disable for all the users) (as a root we create)
--> If we want to provide the access to the specific user add that user-name in cron.allow file.

CRON format:
------------
MINUTE             HOUR            DAY OF MONTH              MONTH                    DAY OF WEEK             COMMAND/SCRIPT 
(0-59)             (0-23)         (1-31)                    (1-12 or jan-Dec)       (0-6 or sun-sat)           /usr/bin/find

EXAMPLE:
--------
*/1 * * * * hello.sh 

*/1 * * * * /home/ec2-user/hello.sh > /home/ec2-user/output.log 2>&1  (if file is not available it is creates)  (> means redirect standard output (only not error)
FILE DESCRIPTORS:
-----------------
0 --> standard input
1 --> standard output
2 --> standard error

> means redirect standard output
>> means append the standard output
# crontab -e  (To edit crontab)

*/1 * * * * /home/ec2-user/hello.sh > /home/ec2-user/output.log 2>&1
*/1 * * * * /home/ec2-user/hello.sh >> /home/ec2-user/output.log 2>&1

-->add # before crontab syntax to disable it

# crontab -r (To delete the crontab)
# crontab -ir (To delete in interactive mode)
# crontab -l -u <user_name>   (AS a root user we can perform this command)


# cal   --> To display the calendar
# cal 2020
# cal <1-12> 2020

-----------------------------------------------------------------------CLASS-8 END -----------------------------------------------------------------------

# wget <URL>
# curl -o <tomcat.zip> <URL>

# tee --> it will list the o/p and redirect the o/p as well
Example:
-------
[root@ip-172-31-45-133 ~]# ls | tee teeopt.log
all.zip
devops
ec2-user@ip-172-31-41-4.ap-south-1.compute.internal
file1.txt
output.log
sample.txt
sort.txt
teeopt.log
unzip

# script  command records all the activities.
# script enter then a new file called typescript is created.
# script <file-name>  (To give the custom file name)
--> To stop recording enter 'exit'
--> # script -a typescript  (To append the new o/p to the old)

# history  (The default history size is 1000)
# history -c   --> To clear the history
-->Even after restart the server also the history remains exist.

# telnet
# telnet google.com 80  --> To check whether the port is opened or not in remote server along with connectivity checking.

# uname  -->To check which operating system we are using.
# uname -a
# uname -r (kernel release)
# uname -n (hostname)

# /etc->redhat-releases (For RHEL) --> To know which version of Linux we are using
# /etc->os-releases (For ubuntu)

# watch <command>  (by deafault the command is exected for every 2 sec)
# watch -n 5 <command>  -->For every 5 seconds
example: watch -n 5 date

# exit
# logout (= ctrl+d)
# restart
# shutdown (stop the server)
# shutdown -c (stop the shutdown)
# init 0 (stop the server immediately)

------------------------------------------------------------------CLASS-9 END------------------------------------------------------------------------------
# nslookup <domain>
# nslookup www.icicibank.com











